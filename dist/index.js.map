{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexDataType = require( '@stdlib/array-base-assert-is-complex-floating-point-data-type' );\nvar isBooleanDataType = require( '@stdlib/array-base-assert-is-boolean-data-type' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpretComplex = require( '@stdlib/strided-base-reinterpret-complex' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar ind = require( '@stdlib/ndarray-base-ind' ).factory;\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Replaces elements in an indexed array with provided values.\n*\n* @private\n* @param {Collection} x - input array\n* @param {IntegerArray} indices - list of indices\n* @param {Collection} values - values to set\n* @param {NonNegativeInteger} stride - index stride for accessing elements in `values`\n* @param {Function} getIndex - function for resolving an array index\n* @param {NonNegativeInteger} maxIndex - maximum array index (inclusive)\n* @returns {Collection} input array\n*\n* @example\n* var ind = require( '@stdlib/ndarray-base-ind' ).factory;\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var indices = [ 3, 1, 2, 0 ];\n* var values = [ 5, 6, 7, 8 ];\n*\n* var getIndex = ind( 'throw' );\n*\n* var out = indexed( x, indices, values, 1, getIndex, x.length-1 );\n* // returns [ 8, 6, 7, 5 ]\n*/\nfunction indexed( x, indices, values, stride, getIndex, maxIndex ) {\n\tvar iv;\n\tvar i;\n\tvar j;\n\n\tiv = 0;\n\tfor ( i = 0; i < indices.length; i++ ) {\n\t\tj = getIndex( indices[ i ], maxIndex );\n\t\tx[ j ] = values[ iv ];\n\t\tiv += stride;\n\t}\n\treturn x;\n}\n\n/**\n* Replaces specified elements of an accessor array with provided values.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} indices - index object\n* @param {Object} values - values object\n* @param {NonNegativeInteger} stride - index stride for accessing elements in `values`\n* @param {Function} getIndex - function for resolving an array index\n* @param {NonNegativeInteger} maxIndex - maximum array index (inclusive)\n* @returns {Collection} input array\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n* var ind = require( '@stdlib/ndarray-base-ind' ).factory;\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n*\n* var indices = toAccessorArray( [ 1, 2 ] );\n* var values = toAccessorArray( [ 20, 30 ] );\n*\n* var getIndex = ind( 'throw' );\n*\n* var out = accessors( arraylike2object( x ), arraylike2object( indices ), arraylike2object( values ), 1, getIndex, x.length-1 );\n*\n* var v = x.get( 0 );\n* // returns 1\n*\n* v = x.get( 1 );\n* // returns 20\n*/\nfunction accessors( x, indices, values, stride, getIndex, maxIndex ) {\n\tvar xdata;\n\tvar idata;\n\tvar vdata;\n\tvar xset;\n\tvar iget;\n\tvar vget;\n\tvar iv;\n\tvar i;\n\tvar j;\n\n\txdata = x.data;\n\tidata = indices.data;\n\tvdata = values.data;\n\n\txset = x.accessors[ 1 ];\n\tiget = indices.accessors[ 0 ];\n\tvget = values.accessors[ 0 ];\n\n\tiv = 0;\n\tfor ( i = 0; i < idata.length; i++ ) {\n\t\tj = getIndex( iget( idata, i ), maxIndex );\n\t\txset( xdata, j, vget( vdata, iv ) );\n\t\tiv += stride;\n\t}\n\treturn xdata;\n}\n\n/**\n* Replaces elements in a complex array with provided values.\n*\n* @private\n* @param {Collection} x - real-valued floating-point input array view\n* @param {Object} indices - index array object\n* @param {Collection} values - real-valued floating-point values array view\n* @param {NonNegativeInteger} stride - index stride for accessing elements in `values`\n* @param {Function} getIndex - function for resolving an array index\n* @param {NonNegativeInteger} maxIndex - maximum array index (inclusive)\n* @returns {Collection} input array view\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n* var ind = require( '@stdlib/ndarray-base-ind' ).factory;\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n*\n* var indices = [ 0, 2 ];\n* var values = new Float64Array( [ 10.0, 20.0, 50.0, 60.0 ] );\n*\n* var getIndex = ind( 'throw' );\n*\n* var out = complex( x, arraylike2object( indices ), values, 1, getIndex, x.length-1 );\n* // returns <Float64Array>[ 10.0, 20.0, 3.0, 4.0, 50.0, 60.0, 7.0, 8.0 ]\n*/\nfunction complex( x, indices, values, stride, getIndex, maxIndex ) {\n\tvar idata;\n\tvar iget;\n\tvar iv;\n\tvar sv;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tidata = indices.data;\n\tiget = indices.accessors[ 0 ];\n\n\tsv = stride * 2; // note: multiply by 2, as real-valued values array consists of interleaved real and imaginary components\n\tiv = 0;\n\tfor ( i = 0; i < idata.length; i++ ) {\n\t\tj = getIndex( iget( idata, i ), maxIndex );\n\t\tk = j * 2;\n\t\tx[ k ] = values[ iv ];\n\t\tx[ k+1 ] = values[ iv+1 ];\n\t\tiv += sv;\n\t}\n\treturn x;\n}\n\n/**\n* Replaces elements in a boolean array with provided values.\n*\n* @private\n* @param {Uint8Array} x - input array\n* @param {Object} indices - index array object\n* @param {Uint8Array} values - values to set\n* @param {NonNegativeInteger} stride - index stride for accessing elements in `values`\n* @param {Function} getIndex - function for resolving an array index\n* @param {NonNegativeInteger} maxIndex - maximum array index (inclusive)\n* @returns {Uint8Array} input array\n*\n* @example\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var ind = require( '@stdlib/ndarray-base-ind' ).factory;\n*\n* var x = new Uint8Array( [ 1, 0, 0, 1 ] );\n*\n* var indices = [ 3, 1, 2, 0 ];\n* var values = new Uint8Array( [ 0, 1, 1, 0 ] );\n*\n* var getIndex = ind( 'throw' );\n*\n* var out = boolean( x, arraylike2object( indices ), values, 1, getIndex, x.length-1 );\n* // returns <Uint8Array>[ 0, 1, 1, 0 ]\n*/\nfunction boolean( x, indices, values, stride, getIndex, maxIndex ) {\n\tvar idata;\n\tvar iget;\n\tvar iv;\n\tvar i;\n\tvar j;\n\n\tidata = indices.data;\n\tiget = indices.accessors[ 0 ];\n\n\tiv = 0;\n\tfor ( i = 0; i < idata.length; i++ ) {\n\t\tj = getIndex( iget( idata, i ), maxIndex );\n\t\tx[ j ] = values[ iv ];\n\t\tiv += stride;\n\t}\n\treturn x;\n}\n\n\n// MAIN //\n\n/**\n* Replaces specified elements of an array with provided values.\n*\n* @param {Collection} x - input array\n* @param {IntegerArray} indices - list of indices\n* @param {Collection} values - values to set\n* @param {string} mode - index mode\n* @throws {Error} third argument must be broadcast compatible with the second argument\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var indices = [ 1, 2 ];\n* var values = [ 20, 30 ];\n*\n* var out = put( x, indices, values, 'throw' );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var indices = [ 1, 2 ];\n* var values = [ 20, 30 ];\n*\n* var out = put( x, indices, [ 30 ], 'throw' );\n* // returns [ 1, 30, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\nfunction put( x, indices, values, mode ) {\n\tvar getIndex;\n\tvar stride;\n\tvar max;\n\tvar xo;\n\tvar io;\n\tvar vo;\n\n\t// Broadcast the `values` array...\n\tif ( indices.length > 0 ) { // note: this allows `indices` to be empty and `values` to be non-empty (and not broadcast compatible with `indices`) to allow the potential use case where having an empty `indices` array is expected behavior and you don't want to trigger an exception simply because `values` has elements\n\t\t// Note that this effectively in-lines logic from `@stdlib/array/base/broadcast-array` in order to avoid unnecessary object creation...\n\t\tif ( values.length === indices.length ) {\n\t\t\tstride = 1;\n\t\t} else if ( values.length === 1 ) {\n\t\t\tstride = 0;\n\t\t} else {\n\t\t\tthrow new Error( format( 'invalid argument. The third argument must be broadcast compatible with the second argument. Array shape: (%d). Desired shape: (%d).', values.length, indices.length ) );\n\t\t}\n\t}\n\t// Resolve a function for returning an index according to the specified index mode:\n\tgetIndex = ind( mode );\n\n\t// Resolve the maximum index:\n\tmax = x.length - 1;\n\n\txo = arraylike2object( x );\n\tio = arraylike2object( indices );\n\tvo = arraylike2object( values );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tio.accessorProtocol ||\n\t\tvo.accessorProtocol\n\t) {\n\t\t// Note: we only explicitly support select dtype pairs, as this function should not be concerned with casting rules, etc. That is left to userland...\n\t\tif ( isComplexDataType( xo.dtype ) && isComplexDataType( vo.dtype ) ) {\n\t\t\tcomplex( reinterpretComplex( x, 0 ), io, reinterpretComplex( values, 0 ), stride, getIndex, max ); // eslint-disable-line max-len\n\t\t\treturn x;\n\t\t}\n\t\tif ( isBooleanDataType( xo.dtype ) && isBooleanDataType( vo.dtype ) ) {\n\t\t\tboolean( reinterpretBoolean( x, 0 ), io, reinterpretBoolean( values, 0 ), stride, getIndex, max ); // eslint-disable-line max-len\n\t\t\treturn x;\n\t\t}\n\t\taccessors( xo, io, vo, stride, getIndex, max );\n\t\treturn x;\n\t}\n\tindexed( x, indices, values, stride, getIndex, max );\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = put;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Replace specified elements of an array with provided values.\n*\n* @module @stdlib/array-base-put\n*\n* @example\n* var put = require( '@stdlib/array-base-put' );\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var indices = [ 1, 2 ];\n* var values = [ 20, 30 ];\n*\n* var out = put( x, indices, values, 'throw' );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isComplexDataType", "isBooleanDataType", "arraylike2object", "reinterpretComplex", "reinterpretBoolean", "ind", "format", "indexed", "x", "indices", "values", "stride", "getIndex", "maxIndex", "iv", "i", "j", "accessors", "xdata", "idata", "vdata", "xset", "iget", "vget", "complex", "sv", "k", "boolean", "put", "mode", "max", "xo", "io", "vo", "main"]
}
