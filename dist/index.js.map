{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\nvar resolveSetter = require( '@stdlib/array-base-resolve-setter' );\nvar ind = require( '@stdlib/ndarray-base-ind' ).factory;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Replaces specified elements of an array with provided values.\n*\n* @param {Collection} x - input array\n* @param {IntegerArray} indices - list of indices\n* @param {Collection} values - values to set\n* @param {string} mode - index mode\n* @throws {Error} third argument must be broadcast compatible with the second argument\n* @returns {Array} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var indices = [ 1, 2 ];\n* var values = [ 20, 30 ];\n*\n* var out = put( x, indices, values, 'throw' );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var indices = [ 1, 2 ];\n* var values = [ 20, 30 ];\n*\n* var out = put( x, indices, [ 30 ], 'throw' );\n* // returns [ 1, 30, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\nfunction put( x, indices, values, mode ) {\n\tvar getIndex;\n\tvar xset;\n\tvar iget;\n\tvar vget;\n\tvar max;\n\tvar vs;\n\tvar vo;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\t// Resolve accessors for accessing array elements:\n\txset = resolveSetter( x );\n\tiget = resolveGetter( indices );\n\tvget = resolveGetter( values );\n\n\t// Resolve a function for returning an index according to the specified index mode:\n\tgetIndex = ind( mode );\n\n\t// Resolve the maximum index:\n\tmax = x.length - 1;\n\n\t// Broadcast the `values` array...\n\tN = indices.length;\n\tif ( N > 0 ) { // note: this allows `indices` to be empty and `values` to be non-empty (and not broadcast compatible with `indices`) to allow the potential use case where having an empty `indices` array is expected behavior and you don't want to trigger an exception simply because `values` has elements\n\t\t// Note that this effectively in-lines logic from `@stdlib/array/base/broadcast-array` in order to avoid unnecessary object creation...\n\t\tif ( values.length === N ) {\n\t\t\tvs = 1;\n\t\t} else if ( values.length === 1 ) {\n\t\t\tvs = 0;\n\t\t} else {\n\t\t\tthrow new Error( format( 'invalid argument. The third argument must be broadcast compatible with the second argument. Array shape: (%d). Desired shape: (%d).', values.length, N ) );\n\t\t}\n\t}\n\tvo = 0;\n\n\t// Replace each desired element in the provided array...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tj = getIndex( iget( indices, i ), max );\n\t\txset( x, j, vget( values, vo ) );\n\t\tvo += vs;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = put;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Replace specified elements of an array with provided values.\n*\n* @module @stdlib/array-base-put\n*\n* @example\n* var put = require( '@stdlib/array-base-put' );\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var indices = [ 1, 2 ];\n* var values = [ 20, 30 ];\n*\n* var out = put( x, indices, values, 'throw' );\n* // returns [ 1, 20, 30, 4 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,mCAAoC,EAC7DC,EAAgB,QAAS,mCAAoC,EAC7DC,EAAM,QAAS,0BAA2B,EAAE,QAC5CC,EAAS,QAAS,uBAAwB,EAuC9C,SAASC,EAAKC,EAAGC,EAASC,EAAQC,EAAO,CACxC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,EACAC,EAeJ,GAZAP,EAAOT,EAAeI,CAAE,EACxBM,EAAOX,EAAeM,CAAQ,EAC9BM,EAAOZ,EAAeO,CAAO,EAG7BE,EAAWP,EAAKM,CAAK,EAGrBK,EAAMR,EAAE,OAAS,EAGjBW,EAAIV,EAAQ,OACPU,EAAI,EAER,GAAKT,EAAO,SAAWS,EACtBF,EAAK,UACMP,EAAO,SAAW,EAC7BO,EAAK,MAEL,OAAM,IAAI,MAAOX,EAAQ,sIAAuII,EAAO,OAAQS,CAAE,CAAE,EAMrL,IAHAD,EAAK,EAGC,EAAI,EAAG,EAAIC,EAAG,IACnBC,EAAIR,EAAUE,EAAML,EAAS,CAAE,EAAGO,CAAI,EACtCH,EAAML,EAAGY,EAAGL,EAAML,EAAQQ,CAAG,CAAE,EAC/BA,GAAMD,EAEP,OAAOT,CACR,CAKAN,EAAO,QAAUK,ICvEjB,IAAIc,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "resolveGetter", "resolveSetter", "ind", "format", "put", "x", "indices", "values", "mode", "getIndex", "xset", "iget", "vget", "max", "vs", "vo", "N", "j", "main"]
}
